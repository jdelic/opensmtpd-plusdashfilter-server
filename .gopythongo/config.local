
builder=docker
docker-buildfile=.gopythongo/Dockerfile.jinja.build
docker-buildarg=[APTSRCHOST=192.168.56.10 fileserver.maurusnet.test,APTSRCDEF=deb http://fileserver.maurusnet.test/debian/ jessie main]
dockerfile-var=APTKEYURL=http://fileserver.maurusnet.test/dev_apt_signing.public.pgp

# if you use your own package mirror, you MUST add the Debian release keys to
# /etc/apt/trusted.gpg first, otherwise debootstrap will be unable to
# authenticate the packages
#   gpg --no-default-keyring --keyring /root/mypackage_sign_pub.gpg --secret-keyring /root/mypackage_sign_secret.gpg --gen-key
#
# The following MUST be on one line. You also probably want to put this into
# the PBUILDER_CREATE_OPTS environment variable on your build server.
# Again, use this if you use your own local Debian mirror, otherwise it's
# unnecessary.

run-after-create=[.gopythongo/install_fpm.sh]
packer=fpm

store=aptly
repo=plusdashfilter
use-aptly-vault-wrapper
aptly-config=/etc/aptly/aptly.conf
aptly-distribution=jessie
# To sign your own packages and publish them on your own APT repository, you
# should create a signing keypair, like this:
#   gpg --no-default-keyring --keyring /root/mypackage_sign.gpg --gen-key
#
# Then note the key's ID and the passphrase you protected it with. Put the
# passphrase in a text file on your build server readable only by the build
# server itself. Put your key's ID and the passphrase file location in the
# config line below.
#
# The following MUST be on one line. You MOST LIKELY don't want to keep this
# information in your source control, but really want to set the
# APTLY_PUBLISH_OPTS environment variable on your build server instead.
aptly-publish-opts="-architectures=amd64 -keyring=/etc/gpg-managed-keyring/pubring.gpg -secret-keyring=/etc/gpg-managed-keyring/secring.gpg -gpg-key=DDB131CF1DF6A9CF8200799002CBD940A78049AF"

# If you want to publish to S3, you must configure aptly with a AWS Key ID and
# secret key in aptly.conf.
aptly-publish-endpoint=s3:maurusnet:debian

# Change the lines below to read your project's version from somewhere else
# if you want to.
versioner=pymodule
pymodule-read=plusdashfilter.version
version-parser=pep440
version-action=bump-revision

use-fpm=/usr/local/bin/fpm
run-fpm=template:.gopythongo/fpm_opts

eatmydata
eatmydata-path=/usr/bin/eatmydata
